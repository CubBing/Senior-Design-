import cv2
import mediapipe as mp
import numpy as np
import speech_recognition as sr
from gtts import gTTS
from playsound import playsound
import os

# Initialize MediaPipe Pose module
mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose

# Define exercises and their parameters
exercises = {
    'bicep curl': {
        'landmarks': [mp_pose.PoseLandmark.LEFT_SHOULDER, mp_pose.PoseLandmark.LEFT_ELBOW, mp_pose.PoseLandmark.LEFT_WRIST],
        'angle_thresholds': (160, 50)  # (down_angle, up_angle)
    },
    'squat': {
        'landmarks': [mp_pose.PoseLandmark.LEFT_HIP, mp_pose.PoseLandmark.LEFT_KNEE, mp_pose.PoseLandmark.LEFT_ANKLE],
        'angle_thresholds': (180, 90)  # Example values for squat
    }
}

# Function to calculate angle between three points
def calculate_angle(a, b, c):
    a = np.array(a)
    b = np.array(b)
    c = np.array(c)
    radians = np.arctan2(c[1] - b[1], c[0] - b[0]) - np.arctan2(a[1] - b[1], a[0] - b[0])
    angle = np.abs(radians * 180.0 / np.pi)
    if angle > 180.0:
        angle = 360 - angle
    return angle

# Function to convert text to speech
def text_to_speech(text):
    language = 'en'
    output = gTTS(text=text, lang=language, slow=False)
    output_file = "output.mp3"
    output.save(output_file)
    playsound(output_file)
    os.remove(output_file)

# Function to handle mouse clicks
def select_workout(event, x, y, flags, param):
    global selected_workout
    if event == cv2.EVENT_LBUTTONDOWN:
        if 100 < x < 300 and 400 < y < 450:
            selected_workout = 'bicep curl'
        elif 100 < x < 300 and 500 < y < 550:
            selected_workout = 'squat'

# Function to display the introduction screen with clickable buttons
def display_intro():
    global selected_workout
    selected_workout = None

    # Create a black image
    intro_image = np.zeros((600, 800, 3), dtype=np.uint8)
    
    # Set text
    cv2.putText(intro_image, 'Welcome to AI Fitness Coach', (50, 150), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (255, 255, 255), 3, cv2.LINE_AA)
    cv2.putText(intro_image, 'Please select the workout you wish to do:', (50, 250), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)
    
    # Draw buttons
    cv2.rectangle(intro_image, (100, 400), (300, 450), (0, 255, 0), -1)
    cv2.rectangle(intro_image, (100, 500), (300, 550), (0, 0, 255), -1)
    cv2.putText(intro_image, 'Bicep Curl', (130, 430), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2, cv2.LINE_AA)
    cv2.putText(intro_image, 'Squat', (180, 530), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2, cv2.LINE_AA)
    
    cv2.namedWindow('Introduction')
    cv2.setMouseCallback('Introduction', select_workout)
    
    while selected_workout is None:
        cv2.imshow('Introduction', intro_image)
        if cv2.waitKey(10) & 0xFF == ord('q'):
            break
    
    cv2.destroyWindow('Introduction')

# Main function to run the AI Fitness Coach
def main():
    display_intro()  # Show introduction screen

    if selected_workout is None or selected_workout not in exercises:
        print("No valid workout selected. Exiting.")
        return

    workout = selected_workout
    counter = 0
    stage = None
    cap = cv2.VideoCapture(0)
    cv2.namedWindow('Mediapipe Feed', cv2.WINDOW_NORMAL)
    cv2.resizeWindow('Mediapipe Feed', 800, 600)

    with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:
        while cap.isOpened():
            ret, frame = cap.read()
            image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            image.flags.writeable = False

            # Make pose detection
            results = pose.process(image)

            image.flags.writeable = True
            image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

            try:
                landmarks = results.pose_landmarks.landmark
                ex = exercises[workout]
                landmark_points = [landmarks[point.value] for point in ex['landmarks']]
                coordinates = [(point.x, point.y) for point in landmark_points]

                angle = calculate_angle(coordinates[0], coordinates[1], coordinates[2])
                cv2.putText(image, str(angle),
                            tuple(np.multiply(coordinates[1], [640, 480]).astype(int)),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)

                down_angle, up_angle = ex['angle_thresholds']
                if angle > down_angle:
                    stage = "down"
                if angle < up_angle and stage == 'down':
                    stage = "up"
                    counter += 1
                    text_to_speech(f"Great job! You've completed {counter} reps.")

            except:
                pass

            # Render curl counter
            cv2.rectangle(image, (0, 0), (225, 73), (245, 117, 16), -1)
            cv2.putText(image, 'REPS', (15, 12),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
            cv2.putText(image, str(counter),
                        (10, 60),
                        cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 2, cv2.LINE_AA)

            mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
                                      mp_drawing.DrawingSpec(color=(245, 117, 66), thickness=2, circle_radius=2),
                                      mp_drawing.DrawingSpec(color=(245, 66, 230), thickness=2, circle_radius=2))

            cv2.imshow('Mediapipe Feed', image)

            if cv2.waitKey(10) & 0xFF == ord('q'):
                break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
